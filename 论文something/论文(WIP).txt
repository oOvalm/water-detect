论文题目：基于无人机拍摄图像和视频的水域检测平台设计与实现

1	绪论
1.1	研究背景与意义
1.1.1 项目背景
在全球环境变迁加速和工业化进程高歌猛进的时代背景下，水域污染已演变为一个严峻的全球性挑战，对人类赖以生存的环境以及公众健康构成了不容忽视的威胁。作为地球最为重要的自然资源之一，水域的质量状况直接关乎生态平衡的维持、生物多样性的保护，以及人类社会的可持续发展。精准且及时的水域监测，能够有效识别水体污染状况，对潜在的污染风险发出预警，在评估生态系统健康状态以及制定科学合理的环境保护政策方面发挥着举足轻重的作用，其重要性不言而喻。
传统的水域监测手段，诸如定点采样和人工巡查等，存在着显著的局限性。这些方法不仅需要投入大量的人力、物力资源，而且由于时间成本的限制，在面对广袤的水域时，难以实现高效、全面的监测覆盖。这就导致大量潜在的水域污染问题无法被及时发现和处理，进而加剧了环境污染的严峻态势。
随着科技的飞速发展，无人机技术为水域监测领域带来了新的曙光。无人机凭借其成本效益高、灵活性强、监测范围广等突出优势，成为理想的水域影像采集工具。通过搭载高清摄像头以及各类先进传感器，无人机能够实时拍摄并传输水域的图像和视频，帮助监测人员全面、直观地掌握水域状况。这种非接触式的监测模式，不仅大幅提高了监测效率，还显著降低了监测人员面临的安全风险。
1.1.2 研究意义
本研究致力于构建一套基于无人机图像与视频拍摄的水域检测平台，核心目标是实现无人机采集的数据与水域监测模型的高效融合，并整合便捷的数据管理功能以及团队协作机制，从而打造一套全面且高效的水域监测体系。这一平台的构建，不仅能够优化现有的水域监测流程，还为未来智慧环境监测体系的建设提供了有益的探索方向。
从理论层面来看，本研究创新性地将深度学习技术与无人机技术有机结合，为水域监测领域开辟了全新的技术路径和分析方法。深度学习模型能够对无人机采集的水域图像及视频进行自动化、智能化处理与分析，极大地提高了水域污染的识别速度和监测精度，为水域监测提供了更为可靠的技术支撑，同时也为其他环境监测领域提供了可借鉴的经验。
在实践层面，该平台将显著提升水域监测的效率与准确性。它不仅能够提供无人机拍摄的高清原始图像和视频资料，还能生成可视化的监测成果，使监测人员能够直观、全面地了解水域状况，并依据可视化结果及时发现和处理潜在的污染问题。此外，平台的数据管理功能优化了监测数据的收集、整理与分析流程，为用户提供快速、精准的水域检测信息。不仅如此，该平台还能够为水文、气象以及生态学等领域的科研工作提供重要的数据支持。科研人员通过深入分析无人机采集的数据，能够更加深入地探究水域生态系统的运行规律，为相关领域的研究提供详实、精确的数据资源，推动学科发展，为环境保护与可持续发展奠定坚实的科学基础。
1.2	研究现状
在水域监测领域，国内外对无人机技术的应用均取得了显著进展。国外方面，美国国家海洋与大气管理局借助无人飞行器与无人水下航行器收集水域科学数据，彰显了无人机在复杂水域环境下的数据采集能力。美国开展的水下无人机试验，在特拉华湾水域成功完成极限作业，进一步拓展了无人机在该领域的应用范畴。国内也成果丰硕，国家海洋局于江苏省开展的无人机遥感监视监测试点工作，有力推动了相关技术的推广应用；黄河水利委员会山东水文局自主研发的无人机测深系统，突破了传统无人船在复杂水域作业及测深仪盲区测量的技术瓶颈，为水域监测提供了新手段。
在目标检测算法方面，YOLO 算法已在自动驾驶、农业、医学等多领域实现应用，能较为准确地识别目标。在发展趋势上，其在自动驾驶领域价值极高，可快速识别并跟踪车辆、行人等对象，助力车辆规避障碍，且已广泛应用于多个领域。
在应用领域，本课题主要聚焦于水质监测与污染防控，通过无人机搭载专业水质检测传感器结合图像分析技术，对各类水域进行定期或实时水质监测，快速定位污染源头，为环保部门提供决策依据，同时在水利工程设施巡检、自然灾害监测与事故处理、景观规划与生态系统保护修复等方面也具有应用潜力。
1.3	研究内容
本研究的主要内容是对基于无人机拍摄图像和视频的水域检测平台设计与实现进行描述，从相关技术概述、系统需求分析、整体架构设计、数据库设计、各系统模块的详细设计与实现、系统部署测试等方面对本检测平台的设计与实现工作进行详细的描述。平台采用模块化架构设计，涵盖无人机数据采集端、智能分析服务器端及用户交互终端三大层级。主要内容如下：
1）	研究了基于Django和Vue的前后端分离开发模式，使用前后端分离开发，能够有效地将前端的界面设计与后端的业务逻辑进行解耦，通过 JWT 令牌认证机制保障数据传输安全，将RTMP流传输协议转换为HLS流媒体协议，xxx
2）	探索 Django 与 YOLO 目标检测模型的技术集成方案，利用 Python 语言的统一技术栈优势，设计了结果解析的标准化接口。通过开发模型服务中间件，实现了视频流影像捕获、目标检测任务、结果可视化、文件保存的全流程自动化处理，解决了多语言开发带来的技术壁垒。
3）	开发了四大核心模块用户管理模块、文件管理模块、视频流媒体模块、文件分享模块等功能，通过RabbitMQ异步任务队列技术处理检测任务，通过Redis监控任务执行状态，确保在视频流检测场景下，检测保持低延迟。
4）	对系统进行部署与测试，将后端拆分成业务逻辑和目标检测逻辑两个模块，避免了相互竞争资源带来的负面影响

2	系统需求分析与设计
2.1	关键技术介绍
2.1.1	前端技术
前端采用了流行的渐进式 JavaScript 框架 Vue.js。通过 Vue-Router 实现动态路由，它能够依据用户操作和 URL 变化，在不同视图间实现灵活导航。利用 Ajax 进行前后端通信，确保数据交换的无缝衔接。
在页面构建方面，引入了 Element-Plus 组件库。Element-Plus 是基于 Vue 3 开发的一套高质量 UI 组件库，它提供了丰富多样且美观易用的组件，像按钮、输入框、表格、弹窗等。这些组件遵循统一的设计风格，具备良好的交互性和响应式布局能力。借助 Element-Plus，能够快速搭建出专业、美观且用户体验出色的页面，提高开发效率，同时也保证了项目界面的一致性和规范性。
在视频播放功能上，项目采用 HLS（HTTP Live Streaming）协议结合 DPlayer 播放器。HLS 是由苹果公司提出的基于 HTTP 的流媒体网络传输协议，它将视频流量分割成一个个小的 TS（(MPEG-2 TranspPort Stream）)文件片段，并生成对应的 mM3uU8 索引文件。 客户端可以根据自身的网络状况，动态地选择不同分辨率的视频片段，根据自身网络状况进行播放，从而实现自适应码率播放，有效避免卡顿、缓冲等问题，提升增强视频观看影体验。DPlayer 是一款简洁强大的 HTML5 视频播放器，它对 HLS 协议有着良好的兼容性，支持多种视频格式。其具有丰富的插件和自定义功能，能够方便地集成到 Vue.js 项目中，提供美观的播放界面，还支持弹幕、截图、播放速度调节等实用功能，为用户带来多样化的视频播放体验。通过二者的结合，可以实现了稳定、流畅的视频播放功能。

2.1.2	后端技术
2.1.2.1	Django
后端采用Django 作为主要开发框架。Django是个基于python的免费开源Web框架，模块化设计的框架，将一个Web应用拆分为多个独立、可复用模块的架构。每个模块专注于特定的功能领域，每个模块都能独立更改而不会影响其他功能的使用，这些模块之间通过清晰定义的接口进行交互，从而构建出一个完整且复杂的应用系统。非常适合有多个相互独立功能的平台。
Django 的 ORM 是其核心技术之一，它提供了一种通过Python代码操作数据库的抽象方式。借助 ORM，开发者无需编写原生的SQL语句，而是使用 Python 类和对象来表示数据库中的表、记录和关系。
运用Django Rest Framework构建RESTful API接口，这些接口为前端提供了标准化、规范化的数据交互方式，便于数据的流畅传输与处理。
2.1.2.2	Flask
另外本平台还使用了Flask框架，Flask是python下的轻量级框架，因其轻量、灵活，适合构建独立的微服务模块，在本系统中作为与YOLO模型交互的一个微服务。
2.1.3	数据库技术
2.1.3.1	Mysql
MySQL 是一种广泛使用的开源关系型数据库管理系统（RDBMS），以其高性能、可靠性和易用性著称。它支持标准的 SQL 语言，提供了丰富的数据类型，如整数、浮点数、字符、日期和时间等，能够满足各种复杂的数据存储需求。
Mysql以表格的形式存储数据，每个表格由行和列组成。每一行存储一条数据。支持通过建立索引、选择适合的存储引擎的方式提高查询效率
2.1.3.2	Redis
Redis 是一个基于内存的高性能键值对存储数据库，同时也支持多种数据结构，如字符串、哈希、列表、集合和有序集合等。它以其快速的读写速度和灵活的数据结构，在缓存、消息队列、实时数据分析等领域得到了广泛应用。 
Redis 的数据存储在内存中，这使得它的读写速度非常快，能够在短时间内处理大量的请求。对经常访问的数据存储在内存中，当有请求时直接从缓存中读取，可以显著提高系统的响应速度，减少数据库的负载。
2.1.4	异步消息技术
2.1.4.1	RabbitMQ
RabbitMQ 是一个开源的消息代理和队列服务器，用于通过异步消息传递机制来实现系统之间的解耦。它基于 AMQP（高级消息队列协议）实现，支持多种消息传递模式，如点对点、发布/订阅等。
在RabbitMQ中有5个身份：生产者、消费者、队列、交换机。主要工作流程为：生产者将消息发送到交换机中，交换机根据绑定规则将消息路由到一个或多个队列中，消费者总队列中获取消息进行处理。
通过RabbitMQ可以将业务进行解耦，将耗时任务交给消费者处理，生产者发送消息后可以立即返回，RabbitMQ有消息持久化和重试的机制，持久化可以保证程序重启时不会丢失消息，重试机制能够保证消息不会因为消费者抖动而消费失败。
2.1.4.2	轮询 
轮询是较为简单的任务处理机制，任务生产方将任务存放到Redis中，消费者通过轮询Redis指定key，当查询到消息后执行特定动作进行处理
2.1.5	目标检测算法YOLO
YOLO（You Only Look Once）是由Joseph Redmon团队于2016年提出的里程碑式目标检测框架，其颠覆性地重构了传统检测范式。相较于R-CNN系列算法依赖"区域提案+分类回归"的两阶段流程，YOLO创新性地将目标检测建模为单阶段全局回归任务，通过单次前向传播即可实现像素级空间定位与多类别语义判别的同步输出。该架构的推理速度可达每秒45-150帧（在本平台环境下能做到每秒80帧），在无人机实时视频流分析、自动驾驶感知等毫秒级响应的场景中展现出无可替代的优势。
本平台聚焦于无人机航拍影像中的水域目标识别，YOLO算法在此场景中展现显著优势，YOLO检测速度效率高，能够支持在平台中的无人机在线视频传输检测的场景。无人机拍摄的图像通常具有大尺寸、高细节特征，YOLO的单次推理机制可快速解析全局信息，避免逐区域扫描的计算冗余，满足机载设备实时处理需求。
2.2	系统需求分析
2.2.1	功能性需求
用户模块：支持邮箱注册/登录，密码需满足 6-16 位字符；提供密码找回功能，通过邮箱验证码验证身份后重置密码； 未授权用户访问核心功能时自动重定向至登录页，通过jwt机制维护登录态，登录后可在个人中心修改头像、昵称、性别等基础信息。登录成功后
文件系统模块：提供多级目录结构管理功能，支持文件批量移动和删除，支持单个文件下载，记录文件原信息，如上传时间文件名等。
多媒体文件上传：支持视频和图片分片上传，通过分块传输机制降低单次请求负载，提升大文件传输稳定性。后端采用FFmpeg对视频进行HLS切片，并通过 RabbitMQ 实现异步任务调度。
在线浏览功能：对于图片文件，前端通过后端重新拉到上传的视频展示在页面中。对于视频，后端对完整的视频进行切片，在线浏览视频时前端通过DPlayer分批获取视频切片文件，保证视频能够流畅浏览。
模型检测功能：上传完成后自动触发检测任务，通过Redis记录切片总数及检测进度，前端实时轮询更新进度条。支持视频检测过程中的渐进式结果加载，用户可预览已完成检测的切片内容，提升交互响应效率。
流媒体模块：基于RTMP协议接收无人机推流，通过Nginx流媒体服务器实现低延迟转发。Django服务启动独立线程实时转码为HLS格式，前端通过DPlayer实现双流同步播放。对直播切片进行逐切片YOLO11目标检测，检测结果通过FFmpeg生成检测后切片，确保原画面和检测画面只有单切片时长的延迟。 
文件分享与分发模块：对于检测后的视频和直播回放，用户可以通过添加分享的方式生成文件分享连接，其他人可以通过分享连接获取到用户分享的内容，这样可以便于用户之间的文件交流。
2.2.2	非功能性需求
性能需求：直播流处理需满足端到端低时延，视频切片检测速率需高于流生成速率，确保无积压。
安全性需求：用户密码采用sha256哈希加密存储。对于观看直播，支持用户设置观看授权范围，保证只有授权范围内的用户才能观看直播。应当加密存储用户密码，避免数据泄露造成用户密码的泄露。
可靠性需求：通过微服务架构实现依赖GPU的检测服务与业务主服务解耦，确保两个功能互不影响
扩展性需求：YOLO检测服务支持通过路径指定模型，做到能够随时替换检测模型，同时能够适配其他YOLO模型的检测需求。

2.3	系统总体架构设计
基于上一节的需求分析，明确了系统所需要的功能，图1给出了本系统的总体架构。
展现层：前端基于Vue3构建页面，结合 element-plus 实现组件化开发，通过 DPlayer 处理视频播放展示，同时支持无人机摄像头等推流设备的推流接入。
接入层：利用Nginx反向代理功能接收客户端请求，通过 http 协议转发请求，并借助 nginx-rtmp 模块处理 RTMP 直播流相关接入。
应用层：分为业务系统和目标检测系统。业务系统涵盖用户模块、流媒体模块、文件系统模块、分享模块，负责处理Web端的http请求以及业务逻辑。目标检测系统基于 GPU 服务部署，集成 YOLO 模型与数据集，通过 Flask 搭建轻量级架构，提供模型检测接口服务于业务系统。
数据库层：使用 MySQL 实现数据持久化存储，存储用户产生的各类数据；通过 Redis 进行数据缓存，支撑快速数据存取。
基础设施层：依托 ECS（云服务器）、操作系统构建运行环境，并引入 RabbitMQ 实现消息队列功能，支持系统异步处理等场景。
 
图 1 系统架构图
为确保系统稳定运行，采用服务分机器部署策略。图 2 网络架构图呈现以下交互逻辑：用户设备（如电脑、手机）通过 HTTP 协议与 Web 服务器建立连接；推流终端（如电脑、无人机摄像头）借助 RTMP 推流技术，接入 Nginx 的 RTMP 模块。当 Web 端需调用后端服务时，请求经 Nginx 反向代理转发至后端业务服务。后端采用分布式部署模式，业务服务与目标检测服务分别部署于独立机器：业务服务对接 MySQL 实现数据持久化存储，联动文件存储系统，与 Redis 缓存、消息队列协同运作；目标检测服务部署于配备 GPU 的独立服务器，独立承载核心检测任务。最终形成组件既独立又协同的稳定网络架构体系，为系统高效运行提供保障。
 

2.4	数据库设计
数据库设计是根据业务需求构建高效数据存储系统的过程，核心在于平衡数据完整性、性能与扩展性。它通过需求分析明确数据关系，利用ER模型抽象实体关联，再转换为数据库表结构（如用户、订单、商品表），并通过主键、外键约束保证数据一致性。
2.4.1	数据库概念结构设计
数据模型是数据特征的抽象，从抽象层次上描述了系统的静态特征、动态行为和约束条件，为数据库系统的信息表与操作提供一个抽象的框架。描述了数据结构、数据操作及数据约束[xx.1]
基于前面的需求分析，设计出与现实实体对应的数据模型和属性，通过ER图进行展示，本系统的E-R图如图xx所示
 

2.4.2	数据库逻辑结构设计
根据ER模型可知，本系统包含4个实体对象，下面将4个实体拆分成5个数据表，并对表内属性进行解释
表1所示是用户表，一行对应一个用户。id为自增主键确保唯一；email为用户注册时的邮箱，每个用户对应唯一的邮箱，所以email限制为唯一键；password存储用户加密后的密码，使用sha256非对称加密算法加密，保证数据泄露不会导致用户的密码泄露；username为用户名称；sex表示用户的性别1表示男性、2-表示女性；avatar存储用户头像图片地址，防止图片过大导致数据库中一行占用大存储空间；create_time 表示用户的注册时间默认值为CURRENT_TIMESTAMP，update_time表示信息更新时间，使用ON UPDATE CURRENT_TIMESTAMP自动更新。
表 1 user表结构
字段	类型	描述	备注
id	BIGINT	用户ID	自增主键
email	VARCHAR(256)	邮箱	唯一键
password	VARCHAR(1024)	密码	加密存储
username	VARCHAR(100)	用户名称	
avatar	VARCHAR(1024)	用户头像路径	
sex	SMALLINT	用户性别	
create_time	DATETIME(6)	用户注册时间	
update_time	DATETIME(6)	用户信息更新时间	

表2所示是文件信息表，一行对应一个文件。id为自增主键确保唯一；file_pid表示文件对应的父目录，当父目录为根路径时file_pid对应-1，通过业务逻辑保证数据一致性；user_id表示文件所属的用户id，通过外键约束，引用user表的id字段；file_uid为文件资源的唯一标识符，通过唯一键约束，使用python的uuid包创建全局唯一的uid，通过file_uid能够在文件系统中定位到文件本体；size, file_path, filename为文件的元信息，分别表示文件大小、文件在文件系统中的路径、文件名；file_type表示文件类型1表示文件夹、2表示图片、3表示视频；folder_type表示文件夹类型，用于标识系统创建的系统文件夹，0表示普通文件夹、2表示分析文件夹、3表示直播回放文件夹；file_status标识视频转码状态，用于判断视频是否能够在线浏览，0-转码完成，1-转码中，2-转码失败；create_time表示文件的创建时间默认值为CURRENT_TIMESTAMP，update_time表示文件的修改时间，使用ON UPDATE CURRENT_TIMESTAMP自动更新。

表 2 file_info表结构
字段	类型	描述	备注
id	BIGINT	文件ID	自增主键
file_pid	BIGINT	父目录文件id	
user_id	BIGINT	文件所述用户	外键
file_uid	VARCHAR(4096)	文件唯一标识	唯一键
size	BIGINT	文件大小	
file_path	VARCHAR(4096)	文件路径	
file_type	SMALLINT	文件类型	
filename	VARCHAR(4096)	文件名	
folder_type	SMALLINT	文件夹类型	
file_status	SMALLINT	视频转码状态	
create_time	DATETIME(6)	文件上传时间	
update_time	DATETIME(6)	文件最近更新时间	

表3所示是分析文件引用表，用于记录分析前后两个文件的对应关系，为了保留的拓展性(接入多种检测模型)，使用单独的表表示对应关系。id为自增主键，保证表内唯一；file_id表示文件id，使用外键约束，引用file_info表的id字段；is_analysed标识file_id的文件是否为检测后的文件0表示原文件、1表示检测后文件；opposite_file_id表示文件对应的另一个文件id，当file_id为原文件时opposite_file_id为对应的检测后文件id，当file_id为检测后文件时opposite_file_id为对应的原文件id。

表 3 analyse_file_ref表结构
字段	类型	描述	备注
id	BIGINT	主键ID	自增主键
file_id	BIGINT	文件ID	外键file_info表id
opposite_file_id	BIGINT	配对文件ID	外键file_info表id
is_analysed	SMALLINT	是否检测后文件	
create_time	DATETIME(6)	创建时间	

表4所示是推流key信息表。id为自增主键；stream_name为流名称用户可编辑名称让自己识别出流的用处；stream_description为流描述；stream_key 为流唯一标识符，通过唯一键约束，同时也是推流的密钥，推流时通过此值识别不同的流；user_id为所属用户ID，通过外键约束，引用user表的id字段；auth_type为授权类型1-表示公开任何人都能观看直播流、2-表示指定范围可观看、3表示仅自己可观看；auth_user_emails 当auth_type为2时有效，通过邮件标识哪些用户可观看；create_time 为创建时间默认值为CURRENT_TIMESTAMP；update_time为更新时间，使用ON UPDATE CURRENT_TIMESTAMP 自动更新。
表 4 stream_info表结构
字段	类型	描述	备注
id	BIGINT	主键	自增主键
stream_name	VARCHAR(1024)	流名称	
stream_description	VARCHAR(4096)	流描述	
stream_key	VARCHAR(1024)	流唯一标识符	唯一键
user_id	BIGINT	所属用户ID	外键user表id
auth_type	SMALLINT	授权类型	
auth_user_emails	VARCHAR(4096)	授权用户列表	
create_time	DATETIME(6)	创建时间	
update_time	DATETIME(6)	更新时间	


表 5所示是文件分享表，一行对应一次文件分享记录。id 为自增主键，保证记录的唯一性；file_id 表示被分享文件的 id，通过外键约束，引用 file_info 表的 id 字段；user_id 表示进行分享操作的用户 id，通过外键约束，引用user表的 id 字段；valid_type 表示分享链接的有效期类型，用于区分不同的有效期设置；expire_time 表示分享链接的失效时间；share_time表示文件分享的时间，默认值为CURRENT_TIMESTAMP；code为分享文件的提取码，用于访问分享文件时的身份验证；show_count 记录了分享文件的浏览次数；share_code 为分享码，是本次分享操作的唯一标识符，通过唯一键约束，保证其唯一性。

表 5 file_share表结构
字段	类型	描述	备注
id	BIGINT	主键	自增主键
file_id	BIGINT	文件id	外键
user_id	BIGINT	用户id	外键
valid_type	SMALLINT	有效期类型	
expire_time	DATETIME	失效时间	
share_time	DATETIME	分享时间	
code	VARCHAR(5)	提取码	
show_count	INT	浏览次数	
share_code	VARCHAR(512)	分享码	唯一键


2.4.3	数据库物理结构设计
MySQL 的存储引擎是数据库底层的核心组件，负责数据的存储、检索和管理机制。其设计直接影响事务处理、并发控制、索引结构等关键功能。主流的存储引擎有InnoDB和MyISAM，其中MyISAM不支持事务，索引月数据分离存储；InnoDB完整实现了ACID（原子性、一致性、隔离性、持久性）事务模型，通过WAL（预写日志）机制和MVCC（多版本并发控制）技术确保高并发场景下的数据一致性，通过聚簇索引构建主键有序存储结构，同时支持创建辅助二级索引，形成多维度的数据访问路径，从而有效提升查询性能。所以本系统中的所有数据表均采用InnoDB存储引擎。
为了提高查询效率，建立合适的索引是必不可少的。
user表中建立(email)索引，在登录时可以通过邮箱快速查出user信息
File_info表中建立(user_id, file_pid)联合索引，在用户获取文件夹下信息时可完全命中索引快速查找所有文件。
analyse_file_ref表中建立(file_id)索引，通过文件id快速查出对侧文件id
file_share表中建立(user_id)索引，用户管理分享文件时可快速找出所有分享记录。(share_code)索引，在外部用户访问分享连接时，快速查出分享的文件id
stream_key_info表中建立(user_id)索引，用户管理串流key时快速查出所有串流key
